searchState.loadedDescShard("peng_quad", 0, "Peng - A Minimal Quadrotor Autonomy Framework\nRepresents a camera in the simulation which is used to …\nMinimum jerk circle planner\nPlanner for circular trajectories\nHover planner\nPlanner for hovering at a fixed position\nRepresents an Inertial Measurement Unit (IMU) with bias …\nMinimum jerk landing planner\nPlanner for landing maneuvers\nMinimum jerk circle planner\nPlanner for Lissajous curve trajectories\nRepresents a maze in the simulation\nMinimum jerk line planner\nPlanner for minimum jerk trajectories along a straight line\nMinimum snap waypoint planner\nWaypoint planner that generates a minimum snap trajectory …\nError related to linear algebra operations\nError related to normal distribution calculations\nError related to the OSQP solver\nRepresents an obstacle in the simulation\nObstacle avoidance planner\nObstacle avoidance planner that uses a potential field …\nOther general errors\nPID controller for quadrotor position and attitude control\nTrait defining the interface for trajectory planners\nManages different trajectory planners and switches between …\nRepresents a step in the planner schedule.\nEnum representing different types of trajectory planners\nQuadratic Polynomial based waypoint planner\nWaypoint planner that generates a quadratic polynomial …\nRepresents a quadrotor with its physical properties and …\nError related to Rerun visualization\nError related to Rerun spawn process\nError related to Rerun logger setup\nRepresents errors that can occur during simulation\nA struct to hold trajectory data\nAccelerometer bias\nStandard deviation of accelerometer bias drift\nStandard deviation of accelerometer noise\nCurrent acceleration of the quadrotor\nAdd a point to the trajectory if it is further than the …\nAmplitude of the Lissajous curve\nCurrent angular velocity of the quadrotor\nAngular velocity of the circular motion\nThe aspect ratio of the camera\nCenter of the Lissajous curve\nCenter of the circular trajectory\nMatrix of coefficients for each segment and each …\nCoefficients for the x, y, and z components of the …\nturbo color map function\nComputes attitude control torques\nCompute the coefficients for yaw trajectories The yaw …\nCompute the coefficients for the minimum snap trajectory, …\nComputes position control thrust and desired orientation\nConfiguration module\nCreates a planner based on the configuration\nThe current planner\nInfluence distance of obstacles\nInfluence distance of target\nDepth buffer\nDrag coefficient\nStep time used while generating inequality constraints. …\nDuration of the trajectory\nDuration of the trajectory\nDuration of the trajectory\nDuration of the landing maneuver\nDuration of the planner\nEnding position of the trajectory\nEnding yaw angle\nEnding yaw angle\nEnding yaw angle\nEnding yaw angle\nEvaluate the trajectory at a given time, returns the …\nCompute the position, velocity, yaw, and yaw_rate for a …\nThe far clipping plane of the camera\nThe horizontal field of view of the camera\nThe vertical field of view of the camera\nFrequency of the Lissajous curve\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerates the obstacles in the maze\nReturns the state derivative of the quadrotor\nGravitational acceleration in m/s^2\nGravity constant\nGyroscope bias\nStandard deviation of gyroscope bias drift\nStandard deviation of gyroscope noise\nThe horizontal focal length of the camera\nInertia matrix of the quadrotor\nInverse of the inertia matrix\nAccumulated integral error for attitude\nAccumulated integral error for position\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the current trajectory is finished\nChecks if the current trajectory is finished\nAttractive force gain\nRepulsive force gain\nVortex force gain\nPID gain for attitude control including proportional, …\nPID gain for position control including proportional, …\nThe last point that was logged\nLogs simulation data to the rerun recording stream\nLog depth image data to the rerun recording stream\nLog the maze obstacles to the rerun recording stream\nLog the maze tube to the rerun recording stream\ncreates pinhole camera\nlog trajectory data to the rerun recording stream\nThe lower bounds of the maze in the x, y, and z directions\nMass of the quadrotor in kg\nMass of the quadrotor\nMaximum acceleration constraint. Set to 0.0 to disregard …\nMaximum allowed integral error for attitude\nMaximum allowed integral error for position\nMaximum speed of the quadrotor\nMaximum velocity constraint. Set to 0.0 to disregard …\nMinimize which derivative in the QP problem (1-&gt;Velocity, …\nThe minimum distance between points to log\nThe near clipping plane of the camera\nCreates a new Quadrotor with default parameters\nCreates a new IMU with default parameters\nCreates a new PIDController with default gains gains are …\nCreates a new PlannerManager with an initial hover planner\nGenerate a new minimum snap waypoint planner\nGenerate a new QPpolyTraj planner\nCreates a new maze with the given bounds and number of …\nCreates a new camera with the given resolution, field of …\nCreate a new Trajectory instance\nCreates a new obstacle with the given position, velocity, …\nList of obstacles\nThe obstacles in the maze\nThe bounds of the obstacles’ radius\nThe bounds of the obstacles’ velocity\nCurrent orientation of the quadrotor\nAdditional parameters for the planner, stored as a YAML …\nHelper function to parse f32 from YAML\nHelper function to parse unsigned integer from YAML\nHelper function to parse Vector3 from YAML\nPhase of the Lissajous curve\nPlans the trajectory based on the current state and time\nPlans the trajectory based on the current planner type\nThe type of planner to use for this step.\nA vector of 3D points\nOrder of the polynomial to be used in computing trajectory\nCurrent position of the quadrotor in 3D space\nThe position of the obstacle\nRadius of the circular trajectory\nThe radius of the obstacle\nRamp-up time for smooth transitions\nRamp-up time for smooth transitions\nCasts a ray from the camera origin in the given direction\nThe ray directions of each pixel in the camera\nSimulates IMU readings with added bias and noise\nSimulates IMU readings\nRenders the depth of the scene from the perspective of the …\nThe resolution of the camera\nRng for generating random numbers\nVector of time values for each segment, which tells the …\nSets a new planner\nSets the state of the quadrotor\nA smooth attractive force function that transitions from …\nEnsure continuity upto which derivative. NOTE: This MUST …\nStarting position of the trajectory\nStarting position of the trajectory\nStarting position of the trajectory\nStarting position of the landing maneuver\nStart time of the trajectory\nStart time of the trajectory\nStart time of the trajectory\nStart time of the landing maneuver\nStart time of the planner\nStart time of the trajectory\nTime at which the simulation starts. This value has no …\nStarting yaw angle\nStarting yaw angle\nStarting yaw angle\nStarting yaw angle\nStarting yaw angle\nCalculates the derivative of the state of the quadrotor\nThe simulation step at which this planner should be …\nTarget position for hovering\nTarget position of the planner\nTarget yaw angle for hovering\nSimulation time step in seconds\nList of segment times to reach each waypoint\nUpdates the IMU biases over time\nUpdates the current planner and returns the desired …\nUpdates the quadrotor’s dynamics with control inputs\nUpdates the quadrotor’s dynamics with control inputs …\nUpdates the obstacles in the maze, if an obstacle hits a …\nUpdates the planner based on the current simulation step …\nThe upper bounds of the maze in the x, y, and z directions\nCurrent velocity of the quadrotor\nThe velocity of the obstacle\nThe vertical focal length of the camera\nList of waypoints\nWaypoints for each segment. Note that there should be …\nCoefficients for the yaw component of the trajectory\nList of yaw angles\nConfiguration for the camera\nConfiguration for the simulation\nConfiguration for the IMU\nConfiguration for the maze\nConfiguration for the mesh\nConfiguration for the PID controller\nConfiguration for PID gains\nConfiguration for a planner step\nConfiguration for the quadrotor\nConfiguration for the simulation\nAccelerometer bias drift standard deviation\nAccelerometer noise standard deviation\nAttitude gains\nMaximum integral error for attitude control\nCamera configuration\nControl frequency in Hz\nDivision of the 2D mesh, the mesh will be division x …\nDrag coefficient in Ns^2/m^2\nDuration of the simulation in seconds\nCamera far clipping plane in meters\nCamera field of view in height in degrees\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nLoad configuration from a YAML file.\nGravity in m/s^2\nGyroscope bias drift standard deviation\nGyroscope noise standard deviation\nIMU configuration\nInertia matrix in kg*m^2\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDerivative gains\nIntegral gains\nProportional gains\nLog frequency in Hz\nLower bounds of the maze in meters (x, y, z)\nMass of the quadrotor in kg\nMaximum number of threads for rendering\nMaze configuration\nMesh configuration\nCamera near clipping plane in meters\nNumber of obstacles in the maze\nObstacle radius bounds in meters (min, max)\nObstacle velocity maximum bounds in m/s in (x, y, z) …\nParameters for the planner\nPID Controller configuration\nPlanner schedule configuration\nType of planner to use\nPosition gains\nMaximum integral error for position control\nQuadrotor configuration\nRender depth\nRerun blueprint path\nCamera resolution in pixels (width, height)\nCamera transform matrix for depth\nSimulation configuration\nSimulation frequency in Hz\nSpacing between the squares in meters\nStep number that the planner should be executed (Unit: ms)\nUpper bounds of the maze in meters (x, y, z)\nMultiThreading depth rendering\nUse rerun.io for recording\nUse RK4 for updating quadrotor dynamics_with_controls\nUse RK4 for updating quadrotor dynamics without controls")